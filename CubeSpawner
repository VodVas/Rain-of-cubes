using System.Collections;
using UnityEngine;
using UnityEngine.Pool;

public class CubeSpawner : MonoBehaviour
{
    [SerializeField] private Cube _cubePrefab;
    [SerializeField] private Transform _platformTransform;

    [SerializeField] private float _spawnDelay;

    private ObjectPool<Cube> _cubePool;

    private void Start()
    {
        _cubePool = new ObjectPool<Cube>(CreateCube, OnGetFromPool, OnReleaseToPool, OnDestroyPoolObject, true);

        StartCoroutine(SpawnRepeated());
    }

    private void OnDisable()
    {
        _cubePool.Clear();
    }

    private IEnumerator SpawnRepeated()
    {
        while (true)
        {
            var wait = new WaitForSeconds(_spawnDelay);

            yield return wait;

            SpawnCube();
        }
    }

    private Cube CreateCube()
    {
        float maxAngleRotate = 360f;

        float angleX = Random.Range(0f, maxAngleRotate);
        float angleY = Random.Range(0f, maxAngleRotate);
        float angleZ = Random.Range(0f, maxAngleRotate);

        Quaternion randomRotation = Quaternion.Euler(angleX, angleY, angleZ);

        Cube cube = Instantiate(_cubePrefab, GetRandomPosition(), randomRotation);

        cube.Init(_cubePool);

        return cube;
    }

    private void OnGetFromPool(Cube cube)
    {
        cube.gameObject.SetActive(true);
    }

    private void OnReleaseToPool(Cube cube)
    {
        cube.gameObject.SetActive(false);
    }

    private void OnDestroyPoolObject(Cube cube)
    {
        if (cube != null)
        {
            Destroy(cube.gameObject);
        }
    }

    private Vector3 GetRandomPosition()
    {
        Renderer platformRenderer = _platformTransform.GetComponent<Renderer>();
        Bounds bounds = platformRenderer.bounds;

        float offsetY = 5f;

        float x = Random.Range(bounds.min.x, bounds.max.x);
        float y = bounds.max.y - offsetY;
        float z = Random.Range(bounds.min.z, bounds.max.z);

        return new Vector3(x, y, z);
    }

    private void SpawnCube()
    {
        Cube cube = _cubePool.Get();
        cube.transform.position = GetRandomPosition();
    }
}
